- name: Setup local kubeconfig file
  block:
  - name: Read ca.crt from first control plane
    ansible.builtin.slurp:
      src: /etc/kubernetes/pki/ca.crt
    register: ca_crt_file
    run_once: true
    delegate_to: "{{ kubernetes_first_kube_control_plane }}"

  - name: Set ca_crt variable
    ansible.builtin.set_fact:
      ca_crt: "{{ ca_crt_file.content | b64decode }}"
    delegate_to: "{{ kubernetes_first_kube_control_plane }}"
    run_once: true

  - name: Make sure ~/.kube directory exists on localhost
    ansible.builtin.file:
      dest: ~/.kube
      state: directory
      mode: '0700'
    delegate_to: localhost
    become: false
    run_once: true

  - name: Write ca.crt to file ~/ca.crt
    ansible.builtin.copy:
      content: "{{ ca_crt }}"
      dest: ~/.kube/{{ kubernetes_cluster_name }}-ca.crt
      mode: '0600'
    delegate_to: localhost
    become: false
    run_once: true

  - name: Set local kubeconfig values - azure
    ansible.builtin.shell:
      cmd: |
        export -n KUBECONFIG
        kubectl config set-cluster {{ kubernetes_cluster_name }} \
          --server=https://{{ kubernetes_api_endpoint }}:{{ kubernetes_api_port }} \
          --certificate-authority=$HOME/.kube/{{ kubernetes_cluster_name }}-ca.crt

        kubectl config set-credentials oidc:{{ kubernetes_cluster_name }} \
          --exec-command=kubelogin \
          --exec-arg=get-token \
          --exec-arg=--server-id \
          --exec-arg={{ kubernetes_oidc_client_id }} \
          --exec-arg=--client-id \
          --exec-arg={{ kubernetes_kubelogin_azure_client_id }} \
          --exec-arg=--tenant-id \
          --exec-arg={{ kubernetes_kubelogin_azure_client_id }} \
          --exec-api-version=client.authentication.k8s.io/v1beta1

        kubectl config set-context {{ kubernetes_cluster_name }} \
          --cluster={{ kubernetes_cluster_name }} \
          --user=oidc:{{ kubernetes_cluster_name }}

        kubectl config use-context {{ kubernetes_cluster_name }}
      executable: /bin/bash
    delegate_to: localhost
    become: false
    run_once: true
    register: setup_kubeconfig_azure
    changed_when: true
    when: kubernetes_kubelogin_flavor == 'azure'

  - name: Set local kubeconfig values - int128
    ansible.builtin.shell:
      cmd: |
        kubectl config set-cluster {{ kubernetes_cluster_name }} \
          --server=https://{{ kubernetes_api_endpoint }}:{{ kubernetes_api_port }} \
          --certificate-authority=$HOME/.kube/{{ kubernetes_cluster_name }}-ca.crt

        kubectl config set-credentials oidc:{{ kubernetes_cluster_name }} \
          --exec-command=kubelogin \
          --exec-arg=get-token \
          --exec-arg=--oidc-issuer-url \
          --exec-arg="{{ kubernetes_oidc_issuer_url }}" \
          --exec-arg=--oidc-client-id \
          --exec-arg="{{ kubernetes_oidc_client_id }}" \
          --exec-api-version=client.authentication.k8s.io/v1beta1

        kubectl config set-context {{ kubernetes_cluster_name }} \
          --cluster={{ kubernetes_cluster_name }} \
          --user=oidc:{{ kubernetes_cluster_name }}

        kubectl config use-context {{ kubernetes_cluster_name }}
    delegate_to: localhost
    become: false
    run_once: true
    register: setup_kubeconfig_int128
    when: kubernetes_kubelogin_flavor == 'int128'
    changed_when: true

  rescue:
  - name: Output setup-kubeconfig stdout
    ansible.builtin.debug:
      msg: |
        {{ setup_kubeconfig_azure.stdout }}
        {{ setup_kubeconfig_azure.stderr }}
    when: setup_kubeconfig_azure.stdout is defined

  - name: Output setup-kubeconfig-int128 stdout
    ansible.builtin.debug:
      msg: |
        {{ setup_kubeconfig_int128.stdout }}
        {{ setup_kubeconfig_int128.stderr }}
    when: setup_kubeconfig_int128.stdout is defined

  - name: Fail if local kubeconfig setup fails
    ansible.builtin.fail:
      msg: "Failed to setup local kubeconfig file"
