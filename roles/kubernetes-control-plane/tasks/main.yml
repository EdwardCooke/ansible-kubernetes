- name: Initialize control plane
  ansible.builtin.import_tasks: initialize-control-plane.yml
  delegate_to: "{{ first_kube_control_plane }}"
  run_once: true
  when: kubernetes_initialize_ran is not defined or not kubernetes_initialize_ran

- name: Set kubernetes_initialize_ran to true
  ansible.builtin.set_fact:
    kubernetes_initialize_ran: true
  run_once: true
  loop: "{{ ansible_play_hosts }}"
  loop_control:
    loop_var: node
  delegate_facts: true
  delegate_to: "{{ node }}"

- name: Get Join token
  ansible.builtin.shell:
    cmd: |
      kubeadm token create --kubeconfig /etc/kubernetes/admin.conf
  delegate_to: "{{ first_kube_control_plane }}"
  run_once: true
  register: temp_token
  changed_when: true

- name: Upload certificates so they are fresh and not expired
  ansible.builtin.command:
    cmd: kubeadm init phase --config {{ kubernetes_config_directory }}/kubeadm.yaml upload-certs --upload-certs
  register: kubeadm_upload_cert
  run_once: true
  delegate_to: "{{ first_kube_control_plane }}"
  changed_when: true

- name: Set facts
  ansible.builtin.set_fact:
    join_token: "{{ temp_token.stdout }}"
    kubeadm_upload_token: "{{ kubeadm_upload_cert.stdout_lines[-1] | trim }}"
  run_once: true

- name: Configure additional control planes
  ansible.builtin.import_tasks: secondary-control-plane.yml
  when:
  - first_kube_control_plane != inventory_hostname
  - inventory_hostname in groups['control_planes']

- name: Approve all CSR's for kubelet's
  ansible.builtin.shell:
    cmd: |
      # don't do a set -e here because we want to continue if there are no pending CSRs
      set -o pipefail
      kubectl --namespace kube-system --kubeconfig /etc/kubernetes/admin.conf get csr | grep Pending | awk '{print $1}' | xargs kubectl --namespace kube-system --kubeconfig /etc/kubernetes/admin.conf certificate approve
      exit 0
    executable: /bin/bash
  delegate_to: "{{ first_kube_control_plane }}"
  changed_when: true
