- name: Initialize the Kubernetes cluster
  block:
  - name: Create kubeadm file
    ansible.builtin.template:
      src: first-control-plane-kubeadm.yaml.j2
      dest: "{{ kubernetes_config_directory }}/kubeadm.yaml"
      owner: root
      group: root
      mode: '0600'
      backup: false
    register: kubeadm_file

  - name: Stop kubelet
    ansible.builtin.systemd:
      name: kubelet
      state: stopped
      enabled: true

  - name: Run kubeadm init
    ansible.builtin.shell:
      cmd: |
        set -eo pipefail
        kubeadm init --config {{ kubernetes_config_directory }}/kubeadm.yaml \
          {{ kubernetes_kubeadm_init_extra_args }} 2>&1 \
          | tee {{ kubernetes_output_directory }}kubeadm
      creates: "{{ kubernetes_output_directory }}kubeadm"
      executable: /bin/bash
    register: kubeadm_init_output

  - name: Start kubelet
    ansible.builtin.service:
      name: kubelet
      state: started
      enabled: true

  - name: Wait for Kubernetes to fully finalize
    ansible.builtin.shell:
      cmd: |
        export KUBECONFIG="/etc/kubernetes/admin.conf"
        timeout 60 bash -c 'until kubectl get serviceaccount -n default default; do sleep 5; done'
      executable: /bin/bash
    changed_when: false

  - name: Post cluster init hooks
    ansible.builtin.include_tasks: "{{ item }}"
    with_items: "{{ kubernetes_hookfiles.post_cluster_init }}"
    when: kubernetes_hookfiles.post_cluster_init is defined

  - name: Set cluster role binding for admin
    ansible.builtin.shell:
      cmd: |
        set -eo pipefail
        kubectl create clusterrolebinding oidc-admins \
          --clusterrole=cluster-admin \
          --group "{{ kubernetes_group_prefix | default('oidc:') }}Admins" \
          --kubeconfig /etc/kubernetes/admin.conf \
          | tee {{ kubernetes_output_directory }}cluster-admin-binding-created
      executable: /bin/bash
      creates: "{{ kubernetes_output_directory }}cluster-admin-binding-created"
    register: cluster_role_binding_oidc_admins
    changed_when: true

  # CIS 1.2.5
  - name: Install kubelet-csr-approver
    ansible.builtin.import_tasks: install-kubelet-csr-approver.yml

  - name: Set admin.conf namespace to kube-system
    ansible.builtin.shell:
      cmd: |
        set -e
        kubectl config set-context --current --namespace=kube-system --kubeconfig /etc/kubernetes/admin.conf
        touch {{ kubernetes_output_directory }}admin-namespace-set
      creates: "{{ kubernetes_output_directory }}admin-namespace-set"
    register: admin_namespace_set

  - name: Create cluster role binding to make the kube-scheduler fully happy
    ansible.builtin.shell:
      cmd: |
        set -eo pipefail
        kubectl create rolebinding --kubeconfig /etc/kubernetes/admin.conf \
          --namespace kube-system \
          --role=extension-apiserver-authentication-reader \
          --user system:kube-scheduler \
          fix:kube-scheduler:extension-apiserver-authentication-reader \
          | tee {{ kubernetes_output_directory }}kube-scheduler-rolebinding
      executable: /bin/bash
      creates: "{{ kubernetes_output_directory }}kube-scheduler-rolebinding"
    register: kube_scheduler_rolebinding

  - name: Copy admin.conf
    ansible.builtin.command: cp /etc/kubernetes/admin.conf /root/.kube/config
    register: copy_admin_conf
    changed_when: copy_admin_conf.rc == 0

  # CIS 1.1.20, STIG V-242466
  - name: CIS 1.1.20, STIG V-242466 - Secure certificates
    ansible.builtin.shell:
      cmd: chmod 0600 --recursive {{ kubernetes_pki_directory }}/*.crt
    changed_when: true

  # CIS 1.2.5
  - name: CIS 1.2.5 - Copy crb-kubeletcerts.yml
    ansible.builtin.copy:
      src: crb-kubeletcerts.yml
      dest: "{{ kubernetes_config_directory }}/crb-kubeletcerts.yml"
      owner: root
      group: root
      mode: '0600'

  - name: CIS 1.2.5 - Create cluster role bindings for kubelet certs
    ansible.builtin.shell:
      cmd: |
        set -eo pipefail
        kubectl apply -f {{ kubernetes_config_directory }}/crb-kubeletcerts.yml --kubeconfig /etc/kubernetes/admin.conf | tee {{ kubernetes_output_directory }}crb-kubeletcerts
      executable: /bin/bash
      creates: "{{ kubernetes_output_directory }}crb-kubeletcerts"
    register: crb_kubeletcerts
    changed_when: true

  # CIS 4.1.1
  - name: CIS 4.1.1 - Set kubelet.service to 0600
    ansible.builtin.file:
      path: /usr/lib/systemd/system/kubelet.service
      mode: '0600'

  # CIS 4.1.9
  # STIG V-242407
  - name: CIS 4.1.9, STIG V-242407 - Set kubelet config.yaml to 0600
    ansible.builtin.file:
      path: /var/lib/kubelet/config.yaml
      mode: '0600'

  # CIS 5.1.5
  - name: Create service account patch file
    ansible.builtin.copy:
      content: |
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: default
        automountServiceAccountToken: false
      dest: /etc/kubernetes/config/default-serviceaccount-patch.yaml
      owner: root
      group: root
      mode: '0600'
  - name: Apply service account patch
    ansible.builtin.shell:
      cmd: |
        set -eo pipefail

        export KUBECONFIG=/etc/kubernetes/admin.conf

        for namespace in $(kubectl get namespaces -A -o=jsonpath="{.items[*]['metadata.name']}"); do
          echo -n "Patching namespace $namespace - " | tee -a {{ kubernetes_output_directory }}serviceaccount-patch
          kubectl patch serviceaccount default -n ${namespace} --patch-file /etc/kubernetes/config/default-serviceaccount-patch.yaml | tee -a {{ kubernetes_output_directory }}serviceaccount-patch
        done

        touch {{ kubernetes_output_directory }}serviceaccount-patch
      executable: /bin/bash
      creates: "{{ kubernetes_output_directory }}serviceaccount-patch"
    register: serviceaccount_patch
  - name: Output serviceaccount_patch
    ansible.builtin.debug:
      msg: "{{ serviceaccount_patch.stdout_lines }}"

  - name: Post security hooks
    ansible.builtin.include_tasks: "{{ item }}"
    with_items: "{{ kubernetes_hookfiles.post_security }}"
    when: kubernetes_hookfiles.post_security is defined

  rescue:
  - name: Write kubeadm init output to stdout
    ansible.builtin.debug:
      msg: |
        {{ kubeadm_init_output.stdout_lines }}
        {{ kubeadm_init_output.stderr_lines }}
    when: kubeadm_init_output.stdout_lines is defined

  - name: Write cluster_role_binding_oidc_admins init output to stdout
    ansible.builtin.debug:
      msg: |
        {{ cluster_role_binding_oidc_admins.stdout_lines }}
        {{ cluster_role_binding_oidc_admins.stderr_lines }}
    when: cluster_role_binding_oidc_admins.stdout_lines is defined

  - name: Write admin_namespace_set init output to stdout
    ansible.builtin.debug:
      msg: |
        {{ admin_namespace_set.stdout_lines }}
        {{ admin_namespace_set.stderr_lines }}
    when: admin_namespace_set.stdout_lines is defined

  - name: Write kube_scheduler_rolebinding init output to stdout
    ansible.builtin.debug:
      msg: |
        {{ kube_scheduler_rolebinding.stdout_lines }}
        {{ kube_scheduler_rolebinding.stderr_lines }}
    when: kube_scheduler_rolebinding.stdout_lines is defined

  - name: Write copy_admin_conf init output to stdout
    ansible.builtin.debug:
      msg: |
        {{ copy_admin_conf.stdout_lines }}
        {{ copy_admin_conf.stderr_lines }}
    when: copy_admin_conf.stdout_lines is defined

  - name: Write crb_kubeletcerts init output to stdout
    ansible.builtin.debug:
      msg: |
        {{ crb_kubeletcerts.stdout_lines }}
        {{ crb_kubeletcerts.stderr_lines }}
    when: crb_kubeletcerts.stdout_lines is defined

  - name: Output serviceaccount_patch error
    ansible.builtin.debug:
      msg: |
        {{ serviceaccount_pach.stdout_lines }}
        {{ serviceaccount_patch.stderr_lines }}
    when: serviceaccount_patch.stdout_lines is defined

  - name: Fail kubeadm init
    ansible.builtin.fail:
      msg: "Failed to initialize the Kubernetes cluster"
